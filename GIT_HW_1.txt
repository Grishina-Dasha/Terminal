GIT Homework 1

Для выполнения задания у вас должен быть установлен для Windows - GitBash.
Создан аккаунт в GitHub
Все шаги сценария выполняйте в терминале GitBush, Terminal, в папке под гитом.

JSON
 4. Создать внешний репозиторий c названием JSON. 
 5. Клонировать репозиторий JSON на локальный компьютер. - git clone https://github.com/Grishina-Dasha/JSON.git
 6. Внутри локального JSON создать файл “new.json”. - vim new.json
 7. Добавить файл под гит. - git add new.json
 8. Закоммитить файл. - git commit -m "Add new.json"
 9. Отправить файл на внешний GitHub репозиторий. - git push
 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
	vim new.json 
	i или insert
	{
	"Name":"Grishina Daria",
	"age":24,
	"pets":0,
	"salary":1000
	}	
	:wq
 11. Отправить изменения на внешний репозиторий. git commit -m "Update new.json" git push
 12. Создать файл preferences.json - vim preferences.json
 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
	i или insert
	{
	"Film":"Devchata",
	"Serial":"The Marvelous Mrs. Maisel",
	"Season":"Spring",
	"Country":"Iceland"}
	:wq
 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON
	vim skills.json
	i или insert
	{
	"SQL":"Create, Delete, Drop, Insert, Into, Select, From, Where, Join",
	"Dev Tools":"Google Chrom, Firefox",
	"Test API Postman":"JS, autotests API"}
	:wq
 15. Отправить сразу 2 файла на внешний репозиторий.
 git commit -am "Add two files"
 git push
 16. На веб интерфейсе создать файл bug_report.json.
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 20. Синхронизировать внешний и локальный репозиторий JSON - git pull
							     git fetch


XML
 21. Создать внешний репозиторий c названием XML. 
 22. Клонировать репозиторий XML на локальный компьютер.- git clone https://github.com/Grishina-Dasha/XML.git
 23. Внутри локального XML создать файл “new.xml”. - vim new.xml
 24. Добавить файл под гит. - - git add new.xml
 25. Закоммитить файл. - git commit -m "Add new.xml"
 26. Отправить файл на внешний GitHub репозиторий. - git push
 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.
	vim new.xml
	i или insert
	<xml>
	<Name>Grishina Daria</Name>
	<age>24</age>
	<pets>0</pets>
	<salary>1000</salary>	
	:wq
 28. Отправить изменения на внешний репозиторий. - git commit -m "Update new.xml" git push
 29. Создать файл preferences.xml
 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.
	vim preferences.xml
	i или insert
	<xml>
	<Film>Devchata</Devchata>
	<Serial>The Marvelous Mrs.Maisel</Serial>
	<Season>Spring</Season>
	<Country>Iceland</Country>
	:wq
 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
	vim skills.xml
	i или insert
	<xml>
	<SQL>Create, Delete, Drop, Insert, Into, Select, From, Where, Join</S	QL>
	<Dev_Tools>Google Chrome, Firefox</Dev_Tools>
	<Test_API_Postman>JS, autotests API</Test_API_Postman>
	:wq
 32. Сделать коммит в одну строку. git commit -am "Add two files"
 33. Отправить сразу 2 файла на внешний репозиторий. git push
 34. На веб интерфейсе создать файл bug_report.xml.
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 38. Синхронизировать внешний и локальный репозиторий XML - git pull
							    git fetch

TXT
 1. Создать внешний репозиторий c названием TXT.
 2. Клонировать репозиторий TXT на локальный компьютер. - git clone https://github.com/Grishina-Dasha/TXT.git
 3. Внутри локального TXT создать файл “new.txt”. - vim new.txt
 4. Добавить файл под гит. - git add new.txt
 5. Закоммитить файл. - git commit -m "Add new.txt"
 6. Отправить файл на внешний GitHub репозиторий. - git push
 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT.
	vim new.txt
	i или insert
	Name: Grishina Daria
	Age: 24
	Pets: 0
	Salary: 1000
	:wq
 8. Отправить изменения на внешний репозиторий. - git commit -m "Update new.txt" git push
 9. Создать файл preferences.txt - vim preferences.txt
 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.
	vim preferences.txt” 
	i или insert
	Film:Devchata
	Serial:The Marvelous Mrs. Maisel
	Season:Spring
	Country:Iceland
	:wq
 11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT
	vim sklls.txt 
	i или insert
	1. Базовая теория (Что такое тестирование, багрепорты, документация, виды, методы, направления тестирования и т.п.) SDLC, STLC.
	2. Что такое клиент-серверная архитектура.
	3. HTTP Методы запросов на сервер.
	4. Коды ответов HTTP сервера.
	5. Структуры HTTP запросов и ответов.
	6. Что такое JSON, XML. Их структура.	
	7. Тестирование API через Postman (JS, автотесты API).
	8. Снятие и чтение логов c внешнего сервера.
	9. Снифинг http web трафика через Charles и Fiddler.
	10. Dev Tools веб браузеров (Google Chrome, FireFox).
	11. VPN. (Как работает, зачем нужен, как использовать, варианты инструментов)
	12. Мобильное тестирование.
	13. Особенность iOS, Android, гайдлайны.
	14. Сборка iOS приложений на XCode. (У кого нет Mac компьютера, просто посмотрят)
	15. Сборка Android приложений на Android Studio.
	16. ADB (управление андройд девайсами).
	17. Настройка прокси и vpn на iOS и Android.
	18. Перехват (сниффинг) мобильного трафика через Charles и Fiddler на iOS и Android.
	19. Командная строка (terminal) Linux (копирование, создание, просмотр, перемещение файлов на серверах без графического интерфейса)
	20. Основы bash скриптинг, автоматизация рутинных задач на сервере.
	21. Доступ к удалённым серверам.
	22. Основы SQL (Create, Delete, Drop, Insert Into, Select, From, Where, Join).
	23. База данных Postgres (установка, настройка и использование).
	24. Нереляционная база данных Redis (установка, настройка и использование).
	25. Нагрузочное тестирование в Jmeter.
	26. Методология разработки Scrum.
	27. Python. (Изучение основ. Создание клиент серверного приложения)
	:wq
 12. Сделать коммит в одну строку. git commit -am "Add files"
 13. Отправить сразу 2 файла на внешний репозиторий. - git push
 14. На веб интерфейсе создать файл bug_report.txt.
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 18. Синхронизировать внешний и локальный репозиторий TXT  - git pull
							     git fetch